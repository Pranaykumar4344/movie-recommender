# -*- coding: utf-8 -*-
"""Movie Recommendation System Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R0J0nJ8Vh6TewJU1VX0DqporKWz2dpcX
"""

!pip install scikit-surprise

# Import necessary libraries
import pandas as pd
import numpy as np
import pickle
from sklearn.model_selection import train_test_split
from sklearn.neighbors import NearestNeighbors
import zipfile
import os
from google.colab import files
from sklearn.metrics.pairwise import cosine_similarity

# 1. Upload Files


# Upload the files for movie and credit dataset
uploaded_movie_file = files.upload()
uploaded_credit_file = files.upload()

# Load the datasets into pandas DataFrame
movies_df = pd.read_csv(list(uploaded_movie_file.keys())[0])
credits_df = pd.read_csv(list(uploaded_credit_file.keys())[0])

# Data Preprocessing
# Merge movies with credits data on 'id'
movies_df = movies_df.merge(credits_df[['movie_id', 'cast']], how='left', left_on='id', right_on='movie_id')

# Clean up columns for recommendation
movies_df = movies_df[['id', 'title', 'overview', 'cast', 'release_date', 'original_language']]
movies_df.dropna(inplace=True)

# Text-based features to build the recommendation model
movies_df['overview'] = movies_df['overview'].apply(lambda x: x.lower())
movies_df['cast'] = movies_df['cast'].apply(lambda x: x.lower())

# 2. Build Model
# For this example, we'll use content-based filtering with Cosine Similarity
# Using 'overview' and 'cast' as features for recommendation

# Combine 'overview' and 'cast' columns to create a single text feature
movies_df['combined'] = movies_df['overview'] + ' ' + movies_df['cast']

# Convert combined text into a vector using CountVectorizer
from sklearn.feature_extraction.text import CountVectorizer
count_vectorizer = CountVectorizer(stop_words='english')
count_matrix = count_vectorizer.fit_transform(movies_df['combined'])

# Compute Cosine Similarity Matrix
cosine_sim = cosine_similarity(count_matrix, count_matrix)

# 3. Save Model
# Save the similarity matrix and movies dataset for future use
with open('movies.pkl', 'wb') as f:
    pickle.dump(movies_df, f)

with open('cosine_sim.pkl', 'wb') as f:
    pickle.dump(cosine_sim, f)

# 4. Create a Zip of the Model
# Create a zip file of the saved models
with zipfile.ZipFile('movie_recommendation_model.zip', 'w') as zipf:
    zipf.write('movies.pkl')
    zipf.write('cosine_sim.pkl')

# Provide download link
files.download('movie_recommendation_model.zip')

# Clean up by removing the files after downloading
os.remove('movies.pkl')
os.remove('cosine_sim.pkl')